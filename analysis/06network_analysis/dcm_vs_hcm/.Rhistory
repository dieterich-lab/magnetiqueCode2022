if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DRIMSeq")
library(DRIMSeq)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PasillaTranscriptExpr")
library("PasillaTranscriptExpr")
data_dir <- system.file("extdata", package = "PasillaTranscriptExpr")
pasilla_metadata <- read.table(file.path(data_dir, "metadata.txt"),
header = TRUE, as.is = TRUE)
View(pasilla_metadata)
pasilla_counts <- read.table(file.path(data_dir, "counts.txt"),
header = TRUE, as.is = TRUE)
library(DRIMSeq)
pasilla_samples <- data.frame(sample_id = pasilla_metadata$SampleName,
group = pasilla_metadata$condition)
levels(pasilla_samples$group)
d <- dmDSdata(counts = pasilla_counts, samples = pasilla_samples)
d
head(counts(d), 3)
head(samples(d), 3)
plotData(d)
gene_id_subset <- readLines(file.path(data_dir, "gene_id_subset.txt"))
d <- d[names(d) %in% gene_id_subset, ]
d
table(samples(d)$group)
d <- dmFilter(d, min_samps_gene_expr = 7, min_samps_feature_expr = 3,
min_gene_expr = 10, min_feature_expr = 10)
design_full <- model.matrix(~ group, data = samples(d))
design_full
set.seed(123)
## Calculate precision
d <- dmPrecision(d, design = design_full)
dev.off()
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_ctrl.RData")
View(input.scores)
length(which(input.scores$pval<=0.05))
input.scores$id[which(input.scores$pval<=0.05)]
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_kd.RData")
input.scores$id[which(input.scores$pval<=0.05)]
rm(list = ls())
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_ctrl.RData")
tf1 <- input.scores$id[which(input.scores$pval<=0.05)]
tf1
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_kd.RData")
tf2 <- input.scores$id[which(input.scores$pval<=0.05)]
tf2
length(unique(intersect(x = tf1, y = tf2)))/length(unique(c(tf1, tf2)))
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_ctrl.RData")
tf1 <- input.scores$id[which(input.scores$pval<=0.1)]
tf1
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_kd.RData")
tf2 <- input.scores$id[which(input.scores$pval<=0.05)]
tf2
tf2 <- input.scores$id[which(input.scores$pval<=0.1)]
tf2
length(unique(intersect(x = tf1, y = tf2)))/length(unique(c(tf1, tf2)))
df <- data.frame(date=c("2017-01-01","2017-01-02", "2017-01-03", "2017-01-04", "2017-01-05"), X1=c("A", "B", "C", "D", "F"),
X2=c("B", "A", "D", "F", "C"))
df2 <- data.frame(date=c("2017-01-01","2017-01-02", "2017-01-03", "2017-01-04", "2017-01-05"),
A=c("3", "4", "2", "1", "5"),
B=c("6", "2", "5", "1", "1"),
C=c("1", "4", "5", "2", "3"),
D=c("67", "67", "63", "61", "62"),
F=c("31", "33", "35", "31", "38"))
View(df)
View(df2)
library("XML")
rm(list = ls())
result <- xmlParse(file = "/home/enio/Downloads/hsa04010.xml")
print(result)
rootnode <- xmlRoot(result)
rootnode
print(rootnode[1])
print(rootnode[2])
print(rootnode[3])
print(rootnode[4])
length(rootnode)
rootnode$relation
print(rootnode$relation)
result
"ccar1"  "cstf2t" "gtf2f1" "hnrnpd" "rbm17"  "sf1"    "srsf3"
"cpsf7"    "fip1l1"   "gtf2f1"   "hnrnpa0"  "hnrnpl"   "hnrnpm"   "hnrnpul1" "pabpn1"   "papola"   "ppil4"    "sf1"
[12] "snrnp200" "srsf7"
install.packages("refmans")
install.packages("adimpro")
library(adimpro)
vignette("adimpro")
read.image("/home/enio/Downloads/test_img.jpeg", compress=TRUE)
read.image(filename = "/home/enio/Downloads/test_img.jpeg", compress=TRUE)
read.image(filename = "/home/enio/Downloads/test_img.jpeg", compress=TRUE)
setwd("/home/enio/Downloads/DoRothEA_CD/")
network_hnrnpk <- read.delim("~/Downloads/domain_centric_networks/hepg2/network_hnrnpk.txt")
View(network_hnrnpk)
net1 <- network_hnrnpk
rm(network_hnrnpk)
combined_networks_hnrnpk <- read.delim("~/Downloads/combined_networks_comb/combined_networks_hnrnpk.txt")
View(combined_networks_hnrnpk)
View(net1)
net2 <- combined_networks_hnrnpk
rm(combined_networks_hnrnpk)
View(net1)
kk1 <- net1[which(net1[, 4]=="spliced"), ]
kk2 <- net2[which(net2[, 4]=="spliced"), ]
View(kk1)
View(kk2)
reac1 <- paste0(kk1[, 1], "=", kk1[, 2])
reac2 <- paste0(kk2[, 1], "=", kk2[, 2])
setdiff(x = reac1, y = reac2)
setdiff(x = reac2, y = reac1)
View(net1)
View(net2)
load(file = system.file("extdata", "digger_human_exons.RData", package = "LINDA"))
View(bg)
network_hnrnpk <- read.delim("~/Downloads/domain_centric_networks/hepg2/network_hnrnpk.txt")
View(network_hnrnpk)
net1 <- network_hnrnpk
rm(network_hnrnpk)
combined_networks_hnrnpk <- read.delim("~/Downloads/combined_networks_comb/combined_networks_hnrnpk.txt")
View(combined_networks_hnrnpk)
net2 <- combined_networks_hnrnpk
rm(combined_networks_hnrnpk)
View(net1)
View(net2)
temp1 <- net1[, c(1:2, 4:6)]
temp2 <- net2[, c(1:2, 4:6)]
View(temp1)
View(temp2)
write.table(x = temp1, file = "/home/enio/Downloads/hnrnpk_prev.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = temp2, file = "/home/enio/Downloads/hnrnpk_curr.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
load(file = "/home/enio/Downloads/LINDA_Example-main/LINDA_Analysis/output/res_ctrl.RData")
kk <- res_ctrl$combined_interactions
View(kk)
load(file = "/home/enio/Desktop/temp/LINDA_Example-main/Gene_Expression/output/ttop_u2af1_hepg2.RData")
ttop1 <- ttop
load(file = "/home/enio/Documents/GitHub/LINDA_Example/Gene_Expression/output/ttop_u2af1_hepg2.RData")
ttop2 <- ttop
rm(ttop)
View(ttop1)
View(ttop2)
idx1 <- which(ttop1$FDR<=0.05)
idx2 <- which(ttop2$FDR<=0.05)
length(idx1)
length(idx2)
nrow(ttop1)
nrow(ttop2)
g1 <- ttop1$ID[idx1]
g2 <- ttop2$ID[idx2]
length(g1)
length(g2)
length(intersect(x = g1, y = g2))
length(unique(ttop1$ID))
length(unique(ttop2$ID))
load(file = "/home/enio/Desktop/temp/LINDA_Example-main/Gene_Expression/output/tf_act_u2af1_hepg2.RData")
View(tf_act)
tf1 <- tf_act$id[which(tf_act$pval<=0.05)]
length(tf1)
getwd()
load(file = "/home/enio/Desktop/temp/LINDA_Example-main/Transcript_Expression/output/splice_effect_u2af1_hepg2.RData")
splice1 <- splice_effect
load(file = "/home/enio/Documents/GitHub/LINDA_Example/Transcript_Expression/output/splice_effect_u2af1_hepg2.RData")
splice1 <- splice_effect
load(file = "/home/enio/Desktop/temp/LINDA_Example-main/Transcript_Expression/output/splice_effect_u2af1_hepg2.RData")
splice1 <- splice_effect
load(file = "/home/enio/Documents/GitHub/LINDA_Example/Transcript_Expression/output/splice_effect_u2af1_hepg2.RData")
splice2 <- splice_effect
View(splice1)
View(splice2)
length(which(splice1$significance<=0.05))
length(which(splice2$significance<=0.05))
length(intersect(x = splice1$id[which(splice1$significance<=0.05)], y = splice2$id[which(splice2$significance<=0.05)]))
length(setdiff(x = splice1$id[which(splice1$significance<=0.05)], y = splice2$id[which(splice2$significance<=0.05)]))
getwd()
tf_act1 <- tf_act
load(file = "/home/enio/Documents/GitHub/LINDA_Example/Gene_Expression/output/tf_act_u2af1_hepg2.RData")
tf_act2 <- tf_act
View(tf_act1)
View(tf_act2)
load(file = "/home/enio/Documents/GitHub/LINDA_Example/Gene_Expression/output/tf_act_u2af1_hepg2.RData")
tf_act2 <- tf_act
View(tf_act1)
View(tf_act2)
library("biomaRt")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="apr2019.archive.ensembl.org");
resMArt=getBM(attributes=c("ensembl_gene_id","external_gene_name", "chromosome_name"),mart=mart)
library("readr")
library("pheatmap")
library("Rsubread")
library("biomaRt")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="apr2019.archive.ensembl.org");
resMArt=getBM(attributes=c("ensembl_gene_id","external_gene_name", "chromosome_name"),mart=mart)
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="www.ensembl.org")
resMArt=getBM(attributes=c("ensembl_gene_id","external_gene_name", "chromosome_name"),mart=mart)
write.table(x = resMArt, file = "/home/enio/Desktop/resMart.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
resMart <- read.delim("~/Desktop/resMart.txt")
View(resMart)
rm(list = ls())
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="apr2019.archive.ensembl.org")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="www.ensembl.org")
resMArt=getBM(attributes=c("ensembl_gene_id","external_gene_name", "chromosome_name"),mart=mart)
write.table(x = resMArt, file = "/home/enio/Desktop/resMart_Human.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="mmusculus_gene_ensembl",host="apr2019.archive.ensembl.org")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="mmusculus_gene_ensembl",host="www.ensembl.org")
resMArt=getBM(attributes=c("ensembl_gene_id","external_gene_name", "chromosome_name"),mart=mart)
View(resMArt)
write.table(x = resMArt, file = "/home/enio/Desktop/resMart_Mouse.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
rm(list = ls())
res <- read.delim(file = "/home/enio/Desktop/resMart_Human.txt")
View(res)
res <- read.delim(file = "/home/enio/Desktop/resMart_Mouse.txt")
res <- read.delim(file = "/home/enio/Desktop/resMart_Human.txt")
setwd("/home/enio/Downloads/MAGNET_Project_ERK/Pathway_Analysis/dcm_vs_hcm/")
network_dcm_vs_hcm_100 <- read.delim("~/Downloads/MAGNET_Project_ERK/Pathway_Analysis/dcm_vs_hcm/network_dcm_vs_hcm_100.txt")
View(network_dcm_vs_hcm_100)
df <- network_dcm_vs_hcm_100[, c(1, 3)]
library(igraph)
gg <- graph_from_data_frame(d = df, directed = TRUE)
aa <- authority_score(graph = gg, scale = TRUE)
aa
scores <- aa$value
scores
scores <- aa$vector
scores
ss <- hub_score(graph = gg, scale = TRUE)
scores <- ss$vector
scores
scores["MAPK1"]
scores["MAPK3"]
View(network_dcm_vs_hcm_100)
scores <- authority_score(graph = gg)
scores <- authority_score(graph = gg)
scores$vector
scores <- hub_score(graph = gg)
scores$vector
scores$vector["MAPK3"]
scores$vector["MAPK1"]
scores <- eigen_centrality(graph = gg, directed = TRUE)
View(df)
gg <- graph_from_data_frame(d = df, directed = TRUE)
rm(list = ls())
getwd()
setwd("/home/enio/Downloads/MAGNET_Project_ERK/Pathway_Analysis/")
library(readr)
library(igraph)
## DCM vs HCM
network <- read.delim("dcm_vs_hcm/network_dcm_vs_hcm_100.txt")
network <- network[-which(network$Node1=="Perturbation"), ]
gg <- graph_from_data_frame(d = network[, c(1, 3)], directed = TRUE)
adj <- get.adjacency(graph = gg)
hScore <- hub_score(graph = gg, scale = TRUE, weights = NULL)
hScore <- hScore$vector[order(hScore$vector, decreasing = TRUE)]
hScore
?hub_score
rm(list = ls())
getwd()
setwd("/home/enio/Downloads/MAGNET_Project_ERK/Pathway_Analysis/dcm_vs_hcm/")
set.seed(123)
library("readxl")
library("readr")
library("XML")
library("igraph")
library("foreach")
library("doParallel")
library("ranger")
library("palmerpenguins")
library("tidyverse")
library("kableExtra")
library("CARNIVAL")
library("dorothea")
library("viper")
library("BiRewire")
library("OmnipathR")
sessionInfo()
